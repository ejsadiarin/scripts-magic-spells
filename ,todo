#!/bin/bash

# this is the daily todo (daily quest)
# - creates new todolist with date (YYYY-MM-DD) as its filename
# - stores in vault/Personal/todos
# - requires "shortcuts/no-neck-pain.nvim" plugin to center the buffer

set -e

date_today=$(date +%Y-%m-%d)
todo_file="$VAULT/Personal/todos/"$date_today.md

# check if $VAULT path exists
cd "$VAULT" || {
    echo "No VAULT env path created. Set a VAULT path in your .zshrc or .bashrc first."
    exit 1
}

# if [ -z "$vault_check" ]; then
# 	echo "No VAULT env path created. Set a VAULT path in your .zshrc or .bashrc first."
# 	exit 1
# fi

new_todo() {
    touch "$todo_file"
    cat >"$todo_file" <<EOF
# DAILY QUEST for $date_today:

    **REMEMBER, in order to be great, you MUST practice like a "great"**

    **make use of the best resources available**

- [ ] Workout [if none, do trifecta (100 pushup, 100 situps, 100 squats)]

- [ ] refresh fundamentals (e.g. any programming session, anki flashcards, etc.)
- [ ] leetcode
- [ ] CCNA grind
- [ ] work on spellbook - life management system
    - agents - gops
    - lever todos - based on resume (reverse engineer resume)
        - markdown files
    - notifications  - event-driven life
        - reminders (acads, daily things, etc.) - connect the lever todos to this
        - connect to calendar webdav (scheduling)
        - anime/manga updates
        - events like bdays, concerts (try to webscape, etc.)

# Side Quests

- [ ] [kubebyexample](https://kubebyexample.com/)
- [ ] own protocol from scratch [not own implementation of certain protocols (already done with HTTP/1.1)]
- [ ] [protohackers](https://protohackers.com/)
- [ ] MIT work - (don't let yourself get behind)
    (focuses on systems programming, OS, network programming, distributed systems, etc.):
    - [6.033 - OS1: os, networking, distrib. systems](http://web.mit.edu/6.033/www/) 
    - [6.097 - operating systems engineering](https://pdos.csail.mit.edu/archive/6.097/)
    - [6.1810 - OS2: operating systems engineering](https://pdos.csail.mit.edu/6.1810/2024/schedule.html) 
    - [6.5840 - distributed systems with go](https://pdos.csail.mit.edu/6.824/schedule.html) 
        - golabs sources: https://github.com/fackee/MIT-6.5840-golabs-2023
    - [6.824 - distributed computer systems engineering (grad)](https://ocw.mit.edu/courses/6-824-distributed-computer-systems-engineering-spring-2006/pages/lecture-notes/)
        - hands on OS and systems programming
    - [6.829 - computer networks (grad)](https://ocw.mit.edu/courses/6-829-computer-networks-fall-2002/pages/syllabus/)
- [x] offsite and onsite Git server
  - [x] offsite: cloud server, codeberg
  - [x] onsite: self-hosted gitlab or gitea

- [x] ntfy.sh docker setup

- [ ] continue sort lock

- [ ] git intricasies <https://www.reddit.com/r/linux/s/NSmM0zzAxu>
- [x] setup cron jobs automation
- [x] look into webhooks
- [ ] [watch API performance design BEST PRACTICES](https://youtu.be/CI0ZxSQ8sWQ?si=ZCrenujPxmeuZ5LX)
- [ ] VLANS: <https://www.youtube.com/watch?v=JszGeQPTo4w&ab_channel=CrosstalkSolutions>

- [ ] 455250 482004 491968 mibry
- [x] <https://github.com/caronc/apprise?ref=selfh.st> -> notification
- [ ] <https://github.com/prometheus/blackbox_exporter> -> probe/ping external services/endpoints (ex. alerts when token expired on some REST API)
- [x] make a script to check if system got updated correctly: 6.13.8-200.fc41.x86_64 then 6.13.5-200.fc41.x86_64
6.13.6-200.fc41.x86_64
6.13.8-200.fc41.x86_64

## Go

- [ ] see swag-go or oapi-codegen OpenAPI spec Code Generator for Go
- [ ] huma or yokai

## Kubernetes

- [ ] setup k3s or k3d
- [ ] [kubebyexample](https://kubebyexample.com/)
- [ ] [go n kubernetes things practical](https://youtube.com/@dhij)
- [ ] add networking k8s: <https://www.reddit.com/r/kubernetes/s/TOZlIZ3Ggg> and [THIS](https://www.reddit.com/r/kubernetes/comments/1cj88by/the_torture_starts_here/)
- [ ] practice k8s (killercoda, play-labs-with-k8s, kodekloud)
- [ ] [Kubernetes Networking Series](https://youtube.com/playlist?list=PLSAko72nKb8QWsfPpBlsw-kOdMBD7sra-&si=IVWpBw9YBy7UYUc_)

## DevOps things

- [ ] [k3s homelab](http//github.com/loganmarchione/k8s_homelab)
- [x] [compose files scripts volumes structure](https://www.reddit.com/r/selfhosted/s/wENppd13RC)
- [x] [cron jobs](https://youtu.be/sKH5cpCrpes?si=w-8BuZa6MkV5Y2cj)
- [x] [ansible role to update all with reboot](http//www.reddit.com/r/selfhosted/s/cy940X7SL2)
- [ ] Scripts to automate things wrt
  - APIs
  - Database shut down start
  - Monitoring
  - Alert
  - Log analysis
  - Log anamoly detection
  - Backups
  - Interface with 3rd party apis
  - Callbacks
  - Ssl renewals
  - Cron jobs
  - Cloud Iac.

# KNOW HOW TO

- [x] basic understanding of the filesystem, what goes where, and how to move around in it.
- [x] basic networking setup and troubleshooting.
- [x] basic administrative tasks like installing/uninstalling stuff, installing updates, reading and setting file permissions, etc.
- [x] ssh basics (key generation and placement, connection, etc)

## What would make a candidate really stand out

- [x] knowing how to join a Linux machine to a domain and managing ssh/sudo access to it using domain credentials instead of keys (familiarity with sshd is helpful here).
- [x] familiarity with ansible and satellite server.
- [x] knowing how to mount basic data disks and network shares.
- [x] how to grow root and swap partitions without downtime (I guess also worth saying familiarity with LVM for this one).
- [x] familiarity with Podman.


EOF
}

if [ ! -f "$todo_file" ]; then
    echo "[ NEW ] Creating $date_today.md..."
    new_todo
fi

if [[ "$*" == --nvim ]]; then
    nvim "$todo_file" -c ":NoNeckPain" '+ normal gg' # needs NoNeckPain nvim plugin (will still work if don't have it)
    # nvim '+ normal Gzzo' "$todo_file" -c :NoNeckPain
fi
